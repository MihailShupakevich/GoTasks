	// 1 
		const (   
			i = 8  
			j   
			k   
)  

 func main() {  
	fmt.Println(i, j, k)  
 }
 
 Ответ: 8 8 8   Пояснение: в ГО, если за указанием первой переменной , не идет указание типа или\и значения второй, то ей будет присвоен тип и значение предыдущей переменной
 
	 // 2 

type Parent struct{}

func (c *Parent) Print() {
	fmt.Println("parent")
}

type Child struct {
	Parent
}

func 	(p *Child) Print() {
	fmt.Println("child")
}

func main() {
	var x Child
	x.Print()
}

Ответ: выводет "child" , потому что ключевой функцией запускающей код, является функция main,в ней мы создаем переменную "х" с типом Чайлд и вызываем метод Print(),которой существует уже в этом в типе Child и он как раз вернет нам строку "child"


	//3 
var counter int
for i := 0; i < 1000; i++ {
   go func() {
      counter++
   }()
   
}
 Ответ : из-за использования Горутин, будет выводится случайное число


	//4
func main() {
	testArr := []int{0, 1}
  (func(ar []int){
		ar[0] = 5
		ar[1] = 6
		fmt.Println(ar)
	})(testArr)

	fmt.Println(testArr)
}


Ответ: [5 6] [5 6]

	//5 
func main() {
	testArr := [2]int{0, 1}
  (func(ar [2]int){
		ar[0] = 5
		ar[1] = 6
		fmt.Println(ar)
	})(testArr)

	fmt.Println(testArr)
}
Ответ: [5 6] [0 1]



	//7
func main() {
	test := func() (a, b, c string) {
		a := "aaa"
		b := "bbb"
		c := "ccc"
		return 
	}
	fmt.Println(test())
}
Ответ: будет ошибка, так как мы пытаемся заново инициализоровать наши переменные

	//8
func main() {
	test := func() (a, b, c string) {
		a = "aaa"
		b = "bbb"
		c = "ccc"
		return 
	}
	fmt.Println(test())
}
Ответ: вернет все текстовые данные

	//9
func main() {
	i:= 99

	switch i:= testFn(); i {
	case 2:
		fmt.Println(i) 
	default:
		fmt.Println(i)
	}

	fmt.Println(i)
}

func testFn() int{
	return 2
}

Ответ:2 99  - Пояснение: Запускаем функцию main, инициализируем i=99 , далее идет свитч-кейс, где мы инициализируем i=функции,которая сразу выполняется и возвращает нам 2 ,и проверяем , если кейс = 2 , тогда выводим значение i, следовательно 1 вывод = 2 , потом в функции main запускается вывод переменной i, но так как в свиче была лишь копия i, то созданная i в main осталась неизменной и равной 99


	//10
func main (){
	defer print(1)
	defer print(2)
	fmt.Println(3)
} 
Ответ : 3 1 2 , defer - запускает выполнение функции в последнюю очередь

	//11 какая строка приведет к ошибке?
1. package main
2. 
3. func f(... interface{}) {}
4.
5. func main() {
6.	f(nil...)
7.	f([]int{1,2,3}...)
8.	f([]interface{}{1,2,3}...)
9. }

ответ: оператор расширения (...) ожидает срез  или массив  в качестве аргумента, а не nil.


	//12
func foo(){
    i := 1
    i++
    defer print(i)
    i++
    defer print(i)
    i++
    defer print(i)
}

Ответ: 4 3 2 Пояснение: дефер откладывает выполнение фукнции в последнюю очередь, но не забывает ее переменные на текущий момент!


	//13
func foo(){
    i := 1
    i++
    defer func(){
        print(i)
    }()
    i++
    defer func(){
        i++
        print(i)
    }()
}
Ответ: 4 4 

	//14
func foo(){
    i := 1
    i++
    defer func(){
        print(i)
    }()
    i++ 
    defer func() {
        i = i+1
        print(i)
    }()
}
Ответ: 4 4 

//15
func foo()(i int ){
    i = 1
    defer func(){
        i++
        print(i)
    }()
    defer func() {
        i++
        print(i)
    }()
    return 
} Ответ: 2 3 

	//16
type MyStruct struct {
	MyInt int
}

// 1 
func func1() MyStruct {
	return MyStruct{1}
}

// 2 
func func2() *MyStruct {
	return &MyStruct{}
}

// 3
func func3(s *MyStruct) {
	s.MyInt = 333 
}

// 4
func func4(s MyStruct) {
	s.MyInt = 923 
}


// 5
func func5() *MyStruct {
	return nil
}

func main (){
    ms1 := func1()
    fmt.Println(ms1.MyInt)

    ms2 := func2()
    fmt.Println(ms2.MyInt)


    func3(ms2)
    fmt.Println(ms2.MyInt)

    func4(ms1)
    fmt.Println(ms1.MyInt)

    ms5:= func5()
    fmt.Println(ms5.MyInt)
}


